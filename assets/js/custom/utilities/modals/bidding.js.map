{"version":3,"file":"js/custom/utilities/modals/bidding.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,iDAAiD;AACjD;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,kCAAkC;AAClC,kCAAkC;AAClC,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://keenthemes/../src/js/custom/utilities/modals/bidding.js"],"sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTModalBidding = function () {\r\n    // Shared variables\r\n    var element;\r\n    var form;\r\n    var modal;\r\n\r\n    // Private functions\r\n    const initForm = () => {\r\n        // Dynamically create validation non-empty rule\r\n        const requiredFields = form.querySelectorAll('.required');\r\n        var detectedField;\r\n        var validationFields = {\r\n            fields: {},\r\n\r\n            plugins: {\r\n                trigger: new FormValidation.plugins.Trigger(),\r\n                bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                    rowSelector: '.fv-row',\r\n                    eleInvalidClass: '',\r\n                    eleValidClass: ''\r\n                })\r\n            }\r\n        }\r\n\r\n        // Detect required fields\r\n        requiredFields.forEach(el => {\r\n            const input = el.closest('.fv-row').querySelector('input');\r\n            if (input) {\r\n                detectedField = input;\r\n            }\r\n\r\n            const textarea = el.closest('.fv-row').querySelector('textarea');\r\n            if (textarea) {\r\n                detectedField = textarea;\r\n            }\r\n\r\n            const select = el.closest('.fv-row').querySelector('select');\r\n            if (select) {\r\n                detectedField = select;\r\n            }\r\n\r\n            // Add validation rule                \r\n            const name = detectedField.getAttribute('name');\r\n            validationFields.fields[name] = {\r\n                validators: {\r\n                    notEmpty: {\r\n                        message: el.innerText + ' is required'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            validationFields\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = form.querySelector('[data-kt-modal-action-type=\"submit\"]');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            }).then(function () {\r\n                                //form.submit(); // Submit form\r\n                                form.reset();\r\n                                modal.hide();\r\n                            });\r\n                        }, 2000);\r\n                    } else {\r\n                        // Show popup error \r\n                        Swal.fire({\r\n                            text: \"Oops! There are some error(s) detected.\",\r\n                            icon: \"error\",\r\n                            buttonsStyling: false,\r\n                            confirmButtonText: \"Ok, got it!\",\r\n                            customClass: {\r\n                                confirmButton: \"btn btn-primary\"\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    // Init Select2 template options\r\n    const initSelect2Templates = () => {\r\n        const elements = form.querySelectorAll('[data-kt-modal-bidding-type] select');\r\n\r\n        if (!elements) {\r\n            return;\r\n        }\r\n\r\n        // Format options\r\n        const format = (item) => {\r\n            if (!item.id) {\r\n                return item.text;\r\n            }\r\n\r\n            var url = 'assets/media/' + item.element.getAttribute('data-kt-bidding-modal-option-icon');\r\n            var img = $(\"<img>\", {\r\n                class: \"rounded-circle me-2\",\r\n                width: 26,\r\n                src: url\r\n            });\r\n            var span = $(\"<span>\", {\r\n                text: \" \" + item.text\r\n            });\r\n            span.prepend(img);\r\n            return span;\r\n        }\r\n\r\n        elements.forEach(el => {\r\n            // Init Select2 --- more info: https://select2.org/\r\n            $(el).select2({\r\n                minimumResultsForSearch: Infinity,\r\n                templateResult: function (item) {\r\n                    return format(item);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Handle bid options\r\n    const handleBidOptions = () => {\r\n        const options = form.querySelectorAll('[data-kt-modal-bidding=\"option\"]');\r\n        const inputEl = form.querySelector('[name=\"bid_amount\"]');\r\n        options.forEach(option => {\r\n            option.addEventListener('click', e => {\r\n                e.preventDefault();\r\n\r\n                inputEl.value = e.target.innerText;\r\n            });\r\n        });\r\n    }\r\n\r\n    // Handle currency selector\r\n    const handleCurrencySelector = () => {\r\n        const element = form.querySelector('.form-select[name=\"currency_type\"]');\r\n\r\n        // Select2 event listener\r\n        $(element).on('select2:select', function (e) {\r\n            const value = e.params.data;\r\n            swapCurrency(value);\r\n        });\r\n\r\n        const swapCurrency = (target) => {\r\n            console.log(target);\r\n            const currencies = form.querySelectorAll('[data-kt-modal-bidding-type]');\r\n            currencies.forEach(currency => {\r\n                currency.classList.add('d-none');\r\n\r\n                if (currency.getAttribute('data-kt-modal-bidding-type') === target.id) {\r\n                    currency.classList.remove('d-none');\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Handle cancel modal\r\n    const handleCancelAction = () => {\r\n        const cancelButton = element.querySelector('[data-kt-modal-action-type=\"cancel\"]');\r\n        const closeButton = element.querySelector('[data-kt-modal-action-type=\"close\"]');\r\n        cancelButton.addEventListener('click', e => {\r\n            cancelAction(e);\r\n        });\r\n\r\n        closeButton.addEventListener('click', e => {\r\n            cancelAction(e);\r\n        });\r\n\r\n        const cancelAction = (e) => {\r\n            e.preventDefault();\r\n\r\n            Swal.fire({\r\n                text: \"Are you sure you would like to cancel?\",\r\n                icon: \"warning\",\r\n                showCancelButton: true,\r\n                buttonsStyling: false,\r\n                confirmButtonText: \"Yes, cancel it!\",\r\n                cancelButtonText: \"No, return\",\r\n                customClass: {\r\n                    confirmButton: \"btn btn-primary\",\r\n                    cancelButton: \"btn btn-active-light\"\r\n                }\r\n            }).then(function (result) {\r\n                if (result.value) {\r\n                    form.reset(); // Reset form\t\r\n                    modal.hide(); // Hide modal\t\t\t\t\r\n                } else if (result.dismiss === 'cancel') {\r\n                    Swal.fire({\r\n                        text: \"Your form has not been cancelled!.\",\r\n                        icon: \"error\",\r\n                        buttonsStyling: false,\r\n                        confirmButtonText: \"Ok, got it!\",\r\n                        customClass: {\r\n                            confirmButton: \"btn btn-primary\",\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    // Public methods\r\n    return {\r\n        init: function () {\r\n            // Elements\r\n            element = document.querySelector('#kt_modal_bidding');\r\n            form = document.getElementById('kt_modal_bidding_form');\r\n            modal = new bootstrap.Modal(element);\r\n\r\n            if (!form) {\r\n                return;\r\n            }\r\n\r\n            initForm();\r\n            initSelect2Templates();\r\n            handleBidOptions();\r\n            handleCurrencySelector();\r\n            handleCancelAction();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTModalBidding.init();\r\n});\r\n"],"names":[],"sourceRoot":""}